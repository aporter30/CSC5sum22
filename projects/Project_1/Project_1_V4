/* 
 * File:   main.cpp
 * Author: Alejandro Porter
 * Created on July 18, 2022, 9:16 PM
 * Purpose: Project One - CandyLand Game
 */

//System Libraries - ALL HAVE TO BE USED
#include <iostream> //input output library--used
#include <iomanip>  //format library--------used
#include <cmath>    //math library----------used
#include <cstdlib>  //rand function---------used
#include <fstream>  //File Input------------used
#include <string>   //string library--------used
#include <ctime>    //srand-----------------used
using namespace std;

//User Libraries
//Global Constants - NO GLOBAL VARIABLES
const short int VICT=85;                    //Victory Condition

//Function Prototypes
void pturn();                               //Process/Display Player Turn

//Execution begins here
int main(int argc, char** argv) {
    //Initialize the Random Number Seed
    srand(time(NULL));
    //Declare Variables - NO DOUBLES - 7 CHARACTERS
    string begin;           //To start the game
    string p1pawn,          //Player 1 Pawn color
           p2pawn;          //Player 2 Pawn color
    int color1,             //How user will input pawn color 1
        color2;             //How user will input pawn color 2
    //Initialize Variables
    //READING CANDYLAND HEADER FILE FROM Project1.txt FILE
    string line;
    ifstream myfile ("Project1.txt");
    if (myfile.is_open()){
        while(getline (myfile,line)){
            cout<<line<<'\n';
        }
        myfile.close();
    }
    else cout << "Unable to open file"; 
    //PROMPT USER TO PRESS ENTER TO START GAME
    cout<<"Object: Be the first player to reach the Candy Castle by "
            "making it to end of the path.\n\n";
    cout<<"Contents: 1 Colorful Gameboard with 85 linear spaces\n";
    cout<<setw(40)<<"2 Gingerbread Character Pawns\n";
    cout<<setw(33)<<"64 Cards Numbered 1-5\n\n";
    cout<<"Game Rules: Draw a card from the deck. The number on the card is how many spaces you move forward.\n";
    cout<<setw(83)<<"If you land on a shortcut tile, you will move forward even more tiles.\n";
    cout<<setw(68)<<"The First Player to Reach the last tile to win the game!\n\n";
    cout<<"Type 'Begin' to begin your journey or 'Exit' to leave the game.\n";
    cin>>begin;
    //INPUT VALIDATION
    if(begin!="Begin"){
        cout<<"Error! Invalid Input.";
    }
    //START GAME
    else if(begin=="Begin"){
        //PLAYERS CHOOSE PAWN COLORS
        cout<<"Player 1, Choose a Pawn Color (1 for Red, 2 for Blue)\n";
        cin>>color1;
        switch(color1){
            case 1:p1pawn="Red";break;
            case 2:p1pawn="Blue";break;
        }
        cout<<"Player 2, Choose a Pawn Color (1 for Red, 2 for Blue)\n";
        cin>>color2;
        switch(color2){
            case 1:p2pawn="Red";break;
            case 2:p2pawn="Blue";break;
        }
        cout<<"\nPlayer 1 - "<<p1pawn<<" Pawn";
        cout<<"\nPlayer 2 - "<<p2pawn<<" Pawn\n";
        //INPUT VALIDATION
        if(p1pawn==p2pawn){ //Both Players Choose Same Color(number)
            cout<<"Both players cannot be the same color! Run the program again.\n";
        }
        //Process Player turns and display player turns
        pturn();
        
    }
    //Exit Stage Right
    return 0;

}
void pturn(){
    
    //PLAYER ONE
    string shrtct;  //Shortcut Description for player 1
    char draw;      //How player 1 will draw card
    int move=0,     //Total moves player 1 has undergone
        card=0,       //card that player 1 draws
        newsqr=0,   //new square that player 1 travels to
        prvsqr=0,   //Player 1's current square
        scsqr=0;      //New square dictated by possible shortcut
    //PLAYER TWO
    string shrtct2; //Shortcut Description for player 1
    string p2pawn;  //How player 2 will draw card
    int move2=0,    //Total moves player 2 has undergone
        card2=0,      //card that player 2 draws
        newsqr2=0,  //new square that player 2 travels to
        prvsqr2=0,  //Player 2's current square
        scsqr2=0;     //New square dictated by possible shortcut
    do{
        //ASK USER TO DRAW CARD
        cout<<"Enter 'd' to draw a card for each player.\n";
        cin>>draw;
        //PLAYER 1
        move+=1;            //adds one to total moves
        card=rand()%5+1;    //randomly generates card with value 1-5
        newsqr=prvsqr+card; //New square=previous square + card drawn
        //SHORTCUTS THAT CAN BE ENCOUNTERED
        if(newsqr==7||newsqr==8){
            shrtct="You Reached Rainbow Trail: go to 40";
            scsqr=40;
        }
        else if(newsqr==9){
            shrtct="You Encounter Lord Licorice: 9 to 24";
            scsqr=24;
        }
        else if(newsqr==32){
            shrtct="You Discover Gumdrop Pass: 32 to 43";
            scsqr=43;
        }
        else if(newsqr==46){
            shrtct="You Chat With Mr. Mint: 46 to 58";
            scsqr=58;
        }
        else if(newsqr==62){
            shrtct="You see Queen Frostine: 62 to 73";
            scsqr=73;
        }
        else if(newsqr==3){
            shrtct="You find a magic candy bar: 3 to 9";
            scsqr=pow(newsqr,2);        //NewSquare^2
        }
        cout<<"\nPlayer 1";
        cout<<"\n---------------------------------------------------------------------------------------------------";
        cout<<"\nMove # - Card Drawn(1-5) - Current Position - New Position - shortcut Tile Reached(if any)\n";
        cout<<"---------------------------------------------------------------------------------------------------\n";
        cout<<setw(3)<<move<<setw(12)<<card<<setw(18)<<prvsqr<<setw(19)<<newsqr<<setw(45)<<shrtct;
        cout<<"\n---------------------------------------------------------------------------------------------------\n";
       
        if(shrtct!=""){     //if shortcut encountered, previous value is shortcut square value
           prvsqr=scsqr;
        }
        else{
            prvsqr=newsqr;  //else, previous square is just the new square the player travels to
        }
        shrtct="";          //Resets shrtct to nothing after previous move is processed
        if(newsqr>=VICT){   //If New suare is greater than or equal to the victory condition
            cout<<"Player One Wins!\n";
            cout<<"Victory Candy!\n";
            for(int i=0; i<VICT; i++){
                cout<<">0<"<<" ";
            }
            break;
        }
        //PLAYER 2
        move2+=1;               //adds one to total moves
        card2=rand()%5+1;       //randomly generates card with value 1-5
        newsqr2=prvsqr2+card2;  //New square=previous square + card drawn
        //POSSIBLE SHORTCUTS FOR PLAYER 2
        if(newsqr2==7||newsqr2==8){
            shrtct2="You Reached Rainbow Trail: go to 40";
            scsqr2=40;
        }
        else if(newsqr2==9){
            shrtct2="You Encounter Lord Licorice: 9 to 24";
            scsqr2=24;
        }
        else if(newsqr2==32){
            shrtct2="You Discover Gumdrop Pass: 32 to 43";
            scsqr2=43;
        }
        else if(newsqr2==46){
            shrtct2="You Chat With Mr. Mint: 46 to 58";
            scsqr2=58;
        }
        else if(newsqr2==62){
            shrtct2="You see Queen Frostine: 62 to 73";
            scsqr2=73;
        }
        else if(newsqr2==3){
            shrtct2="You find a magic candy bar: 3 to 9";
            scsqr2=pow(newsqr2,2);
        }
        cout<<"\nPlayer 2";
        cout<<"\n---------------------------------------------------------------------------------------------------";
        cout<<"\nMove # - Card Drawn(1-5) - Current Position - New Position - shortcut Tile Reached(if any)\n";
        cout<<"---------------------------------------------------------------------------------------------------\n";
        cout<<setw(3)<<move2<<setw(12)<<card2<<setw(18)<<prvsqr2<<setw(19)<<newsqr2<<setw(45)<<shrtct2;
        cout<<"\n---------------------------------------------------------------------------------------------------\n\n";
        if(shrtct2!=""){    //if shortcut encountered, previous value is shortcut square value
        prvsqr2=scsqr2;     
        }
        else{
        prvsqr2=newsqr2;    //else, previous square is just the new square the player travels to
        }
        shrtct2="";
        if(newsqr2>=VICT){  ////If New suare is greater than or equal to the victory condition
            cout<<"Player Two Wins!\n";
            cout<<"Victory Candy!\n ";
            for(int i=0; i<VICT; i++){
                cout<<">0<"<<" ";
            }
            break;
        }
            
    }
    while(draw=='d');{ 
    }
    return;
}
